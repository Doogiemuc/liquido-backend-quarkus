#
# LIQUIDO configuration for Quarkus (this is the default, overwritten by -dev,-test or -prod.properties)
#

# Port for HTTP is actually disabled (we allow only TLS)
quarkus.http.port=8080

# Port for https (8443 is default)
quarkus.http.ssl-port=8443

# Listen on all network interfaces, not just localhost:8080
quarkus.http.host=0.0.0.0


#
# Database Settings
#

# These can also be passed via environment variables
# You MUST set at least a dummy JDBC URL for the quarkus build to work.
# https://quarkus.io/guides/datasource#get-started-with-configuring-datasources-in-quarkus
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=
quarkus.datasource.password=
quarkus.datasource.jdbc.url=jdbc:postgresql://db:5432/liquido-dev

# In quarkus:dev mode an in-memory H2 database can be enabled.
# quarkus.datasource.db-kind=h2
# quarkus.datasource.devservices.enabled=true

# !!! BE CAREFUL !!! This deletes all data in your DB! Do this only ONCE to initialize the schema in an empty DB.
# quarkus.hibernate-orm.database.generation=drop-and-create



#
# TLS configuration for HTTPS
#

# enabled, redirect, disabled(=only allow HTTPS requests)
quarkus.http.insecure-requests=enabled

# Cross-origin resource sharing (CORS)
quarkus.http.cors=true

# Allow any origin in DEV mode
%dev.quarkus.http.cors.origins=/.*/


# Self-signed certificate for SSL (HTTPS) encryption (under src/main/resources/ )
# https://quarkus.io/guides/http-reference#providing-a-certificate-and-key-file
# path inside JAR:  /src/main/resources/liquido-TLS-cert.pem
# Path inside Docker container /resources/liquido-TLS-....
quarkus.http.ssl.certificate.files=/src/main/resources/liquido-TLS-cert.pem
quarkus.http.ssl.certificate.key-files=/src/main/resources/liquido-TLS-key.pem

# Or provide a P12 key store.  This is exactly according to quarkus documentation as of Dec 2023
# https://quarkus.io/guides/http-reference#ssl
#quarkus.http.ssl.certificate.key-store-file=liquido_keystore.p12
# TODO: Better provide this via env: QUARKUS_HTTP_SSL_CERTIFICATE_KEY_STORE_PASSWORD
#quarkus.http.ssl.certificate.key-store-password=liquido

# LOGGING - better more readable format   //TODO: make colors work. Is that a Quarkus or IntelliJ task?
#quarkus.log.console.format=%-5p %K{blue}%15.-15C.%M(%F:%L)%K{brightwhite} | %m%n
quarkus.log.console.format=%-5p %K{blue}%30F:%-5L%K{brightwhite} | %m%n

# key for signing JWTs (we use a simple symmetric key)
smallrye.jwt.sign.key.location=liquidoJwtKey.json
smallrye.jwt.verify.key.location=liquidoJwtKey.json
smallrye.jwt.verify.algorithm=HS256

# Or you can provide the MicroProfile JWT properties:
#mp.jwt.verify.publickey.location=publicKey.pem
#mp.jwt.decrypt.key.location=privateKey.pem

#
# Twillio.org  for sending SMS
#
liquido.twilio.account-sid=123
liquido.twilio.service-sid=456
liquido.twilio.auth-token=abc

#
# LIQUIDO application settings
#

# Signing of JsonWebTokens
liquido.jwt.expiration-secs=3600

# This Url is used in the login email
liquido.frontend-url=http://localhost:3001

# How long is the one time token in the login email valid?
liquido.login-link-expiration-hours=1

# Token for development login, used in test cases
liquido.dev-login-token=liquido_dev_login_token_DUMMY

# Default duration of voting phase in days
liquido.duration-of-voting-phase=7

# Used to create rightToVote tokens
liquido.hash-secret=liquido_hash_secret_DUMMY

# How long is a right to vote token valid
liquido.right-to-vote-expiration-hours=24



# Allow custom extensions in GraphQL error response  (code,description,queryPath,...)
quarkus.smallrye-graphql.error-extension-fields=description,queryPath,liquidoException
#quarkus.smallrye-graphql.log-payload=query-only


#
# Additional settings for building a native image with GRAAL_VM
#
# BUGFIX: MUST make sure that java.util.Random is only initialized at Runtime. Not with a static seed during compile time of the native image!
# https://quarkus.io/guides/writing-native-applications-tips#delay-class-init-in-your-app
# https://foivos.zakkak.net/tutorials/working-with-randoms-native-images/
quarkus.native.additional-build-args=--initialize-at-run-time=org.liquido.util.DoogiesUtil\\,org.apache.http.impl.auth.NTLMEngineImpl
# MUST include resources manually here
#quarkus.native.resources.includes=liquido_keystore.p12
quarkus.native.resources.includes=*.pem,*.p12


### TODO: necessary?  Add Webauthn library to Quarkus Jandex indexing
#quarkus.index-dependency.webauthn.group-id=io.quarkus
#quarkus.index-dependency.webauthn.artifact-id=quarkus-security-webauthn
#quarkus.index-dependency.webauthn.classifier=quarkus-webauthn